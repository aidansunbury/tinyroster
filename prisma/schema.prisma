// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "cockroachdb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// The user "owns" the account and can have multiple accounts
model User {
    id            String    @id
    name          String    @default("New User")
    slug          String    @default("new-user") // does not have to be unique to the entire database, just for all users in the same organization
    email         String?   @unique
    emailVerified DateTime?
    image         String? // Profile image URL
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    profileData   Json? // All profile fields can be configured by the organization admin
    roles         Role[]    @relation("User's Roles")
    teams         Team[]    @relation("User's Teams")
}

// todo delete
model Post {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Organization {
    id     String  @id @default(cuid())
    slug   String  @unique
    name   String
    roles  Role[]  @relation("Role's Organization")
    teams  Team[]  @relation("Team's Organization")
    events Event[] @relation("Event's Organization")
}

// Any meeting or event that could be put on a calendar
model Event {
    id             String       @id @default(cuid())
    name           String
    location       String
    organization   Organization @relation("Event's Organization", fields: [organizationId], references: [id])
    organizationId String
    teams          Team[]       @relation("Event's Teams") // Events can optionally be tied to a specific team, that team must be a part of the same organization
}

// Any grouping of members that are treated as a unit and have different permissions
model Team {
    id             String       @id @default(cuid())
    name           String
    organization   Organization @relation("Team's Organization", fields: [organizationId], references: [id])
    organizationId String
    users          User[]       @relation("User's Teams")
    events         Event[]      @relation("Event's Teams")
}

// Roles must be block scoped to an organization, therefore they can not be stored directly on the user
model Role {
    id             String       @id @default(cuid())
    name           String
    organization   Organization @relation("Role's Organization", fields: [organizationId], references: [id])
    organizationId String
    users          User[]       @relation("User's Roles")
}
